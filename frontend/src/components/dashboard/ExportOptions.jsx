import { format } from 'date-fns';

export default function ExportOptions({ transactions, stats }) {
  
  const exportToCSV = () => {
    if (!transactions || transactions.length === 0) {
      alert('No transactions to export');
      return;
    }

    const headers = ['Date', 'Type', 'Category', 'Description', 'Amount'];
    const csvContent = [
      headers.join(','),
      ...transactions.map(t => [
        format(new Date(t.date), 'yyyy-MM-dd'),
        t.type,
        t.category || '',
        `"${(t.description || '').replace(/"/g, '""')}"`, // Escape quotes
        t.amount.toFixed(2)
      ].join(','))
    ].join('\n');

    downloadFile(csvContent, 'transactions.csv', 'text/csv');
  };

  const exportToJSON = () => {
    if (!transactions || transactions.length === 0) {
      alert('No transactions to export');
      return;
    }

    const exportData = {
      exportDate: new Date().toISOString(),
      summary: stats,
      transactions: transactions.map(t => ({
        id: t._id,
        date: t.date,
        type: t.type,
        category: t.category,
        description: t.description,
        amount: t.amount,
        createdAt: t.createdAt
      }))
    };

    const jsonContent = JSON.stringify(exportData, null, 2);
    downloadFile(jsonContent, 'transactions.json', 'application/json');
  };

  const generatePDFReport = () => {
    if (!transactions || transactions.length === 0) {
      alert('No transactions to generate report');
      return;
    }

    // Create a simple HTML report
    const reportHTML = `
      <!DOCTYPE html>
      <html>
      <head>
        <title>FinTrack Financial Report</title>
        <style>
          body { font-family: Arial, sans-serif; margin: 20px; }
          .header { text-align: center; margin-bottom: 30px; }
          .summary { background: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 30px; }
          .summary-grid { display: grid; grid-template-columns: repeat(3, 1fr); gap: 20px; }
          .summary-item { text-align: center; }
          .summary-value { font-size: 24px; font-weight: bold; margin-bottom: 5px; }
          .summary-label { color: #666; font-size: 14px; }
          .income { color: #10b981; }
          .expense { color: #ef4444; }
          .net { color: #3b82f6; }
          table { width: 100%; border-collapse: collapse; margin-top: 20px; }
          th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
          th { background-color: #f2f2f2; }
          .amount-income { color: #10b981; font-weight: bold; }
          .amount-expense { color: #ef4444; font-weight: bold; }
          @media print { body { margin: 0; } }
        </style>
      </head>
      <body>
        <div class="header">
          <h1>FinTrack Financial Report</h1>
          <p>Generated on ${format(new Date(), 'MMMM dd, yyyy')}</p>
        </div>
        
        <div class="summary">
          <h2>Financial Summary</h2>
          <div class="summary-grid">
            <div class="summary-item">
              <div class="summary-value income">$${stats?.income?.total?.toFixed(2) || '0.00'}</div>
              <div class="summary-label">Total Income</div>
            </div>
            <div class="summary-item">
              <div class="summary-value expense">$${Math.abs(stats?.expense?.total || 0).toFixed(2)}</div>
              <div class="summary-label">Total Expenses</div>
            </div>
            <div class="summary-item">
              <div class="summary-value net">$${stats?.netWorth?.toFixed(2) || '0.00'}</div>
              <div class="summary-label">Net Worth</div>
            </div>
          </div>
        </div>

        <h2>Transaction Details</h2>
        <table>
          <thead>
            <tr>
              <th>Date</th>
              <th>Type</th>
              <th>Category</th>
              <th>Description</th>
              <th>Amount</th>
            </tr>
          </thead>
          <tbody>
            ${transactions.map(t => `
              <tr>
                <td>${format(new Date(t.date), 'MMM dd, yyyy')}</td>
                <td>${t.type}</td>
                <td>${t.category || '-'}</td>
                <td>${t.description || '-'}</td>
                <td class="amount-${t.type}">$${t.amount.toFixed(2)}</td>
              </tr>
            `).join('')}
          </tbody>
        </table>
        
        <div style="margin-top: 30px; font-size: 12px; color: #666; text-align: center;">
          <p>Total Transactions: ${transactions.length}</p>
          <p>Report generated by FinTrack ML</p>
        </div>
      </body>
      </html>
    `;

    // Open in new window for printing/saving as PDF
    const printWindow = window.open('', '_blank');
    printWindow.document.write(reportHTML);
    printWindow.document.close();
    printWindow.focus();
    
    // Auto-print dialog
    setTimeout(() => {
      printWindow.print();
    }, 500);
  };

  const downloadFile = (content, filename, contentType) => {
    const blob = new Blob([content], { type: contentType });
    const url = window.URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = filename;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    window.URL.revokeObjectURL(url);
  };

  return (
    <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 transition-colors">
      <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">Export Data</h3>
      
      <div className="space-y-3">
        <div>
          <button
            onClick={exportToCSV}
            className="w-full flex items-center justify-center px-4 py-2 bg-green-600 dark:bg-green-700 text-white rounded-md hover:bg-green-700 dark:hover:bg-green-800 transition-colors"
          >
            <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
            </svg>
            Export as CSV
          </button>
          <p className="text-xs text-gray-500 dark:text-gray-400 mt-1">Excel-compatible spreadsheet format</p>
        </div>

        <div>
          <button
            onClick={exportToJSON}
            className="w-full flex items-center justify-center px-4 py-2 bg-blue-600 dark:bg-blue-700 text-white rounded-md hover:bg-blue-700 dark:hover:bg-blue-800 transition-colors"
          >
            <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
            </svg>
            Export as JSON
          </button>
          <p className="text-xs text-gray-500 dark:text-gray-400 mt-1">Complete data with metadata</p>
        </div>

        <div>
          <button
            onClick={generatePDFReport}
            className="w-full flex items-center justify-center px-4 py-2 bg-purple-600 dark:bg-purple-700 text-white rounded-md hover:bg-purple-700 dark:hover:bg-purple-800 transition-colors"
          >
            <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 17h2a2 2 0 002-2v-4a2 2 0 00-2-2H5a2 2 0 00-2 2v4a2 2 0 002 2h2m2 4h6a2 2 0 002-2v-4a2 2 0 00-2-2H9a2 2 0 00-2 2v4a2 2 0 002 2zm8-12V5a2 2 0 00-2-2H9a2 2 0 00-2 2v4h10z" />
            </svg>
            Generate PDF Report
          </button>
          <p className="text-xs text-gray-500 dark:text-gray-400 mt-1">Formatted report for printing</p>
        </div>
      </div>

      <div className="mt-4 p-3 bg-gray-50 dark:bg-gray-700 rounded-lg transition-colors">
        <p className="text-sm text-gray-600 dark:text-gray-300">
          <strong>Export Info:</strong><br />
          • {transactions?.length || 0} total transactions<br />
          • Data from {transactions?.length > 0 
            ? format(new Date(Math.min(...transactions.map(t => new Date(t.date)))), 'MMM yyyy')
            : 'N/A'} to {transactions?.length > 0 
            ? format(new Date(Math.max(...transactions.map(t => new Date(t.date)))), 'MMM yyyy')
            : 'N/A'}
        </p>
      </div>
    </div>
  );
}
